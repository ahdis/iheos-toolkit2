package gov.nist.toolkit.xdstools2.client.tabs.GatewayTestsTabs;

import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.ui.*;
import gov.nist.toolkit.actortransaction.shared.ActorType;
import gov.nist.toolkit.configDatatypes.server.SimulatorProperties;
import gov.nist.toolkit.configDatatypes.client.TransactionType;
import gov.nist.toolkit.installation.shared.TestCollectionCode;
import gov.nist.toolkit.installation.shared.TestSession;
import gov.nist.toolkit.results.client.Result;
import gov.nist.toolkit.results.client.TestInstance;
import gov.nist.toolkit.simcommon.client.SimulatorConfig;
import gov.nist.toolkit.sitemanagement.client.SiteSpec;
import gov.nist.toolkit.xdstools2.client.CoupledTransactions;
import gov.nist.toolkit.xdstools2.client.TabContainer;
import gov.nist.toolkit.xdstools2.client.command.command.GetTestResultsCommand;
import gov.nist.toolkit.xdstools2.client.command.command.RunMesaTestCommand;
import gov.nist.toolkit.xdstools2.client.inspector.MetadataInspectorTab;
import gov.nist.toolkit.xdstools2.client.siteActorManagers.GetDocumentsSiteActorManager;
import gov.nist.toolkit.xdstools2.client.tabs.genericQueryTab.GenericQueryTab;
import gov.nist.toolkit.xdstools2.client.widgets.PopupMessage;
import gov.nist.toolkit.xdstools2.shared.command.request.GetTestResultsRequest;
import gov.nist.toolkit.xdstools2.shared.command.request.RunTestRequest;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
Test cases
Query response content from one RG relayed
    no data for patient yields empty set or XDSUnknownPatientId
Query response content from two RGs relayed and merged.
Secondary request (query/retrieve)
    routed only to correct RG (check for shall language)
    contains correct homeCommunityId
OnDemand out of scope
pass all entries received in XC query

Negative tests
    -generate XDSMissingHomeCommunityId error
    -All XDSMissingHomeCommunityId errors generated by the Initiating Gateway shall include, in the context of the
    message, identification of the Responding Gateway that returned the invalid response and the element or elements that were in error.
    - XDSUnknownPatientId error not propagated (per spec)

    more coming...
 */
public class IGXTestTab extends GenericQueryTab implements GatewayTool {
    //    final protected ToolkitServiceAsync toolkitService = GWT
//            .create(ToolkitService.class);
    String selectedActor = ActorType.INITIATING_GATEWAY_X.getShortName();
    List<SimulatorConfig> rgConfigs;
    GenericQueryTab genericQueryTab;
    static final TestCollectionCode COLLECTION_NAME =  new TestCollectionCode("igtool1rg");
    final TestSelectionManager testSelectionManager;

    public IGXTestTab() {
        super(new GetDocumentsSiteActorManager());
        testSelectionManager = new TestSelectionManager(this);
    }

//    @Override
//    public ToolkitServiceAsync getToolkitService() { return toolkitService; }

    @Override
    public TabContainer getToolContainer() { return getTabContainer(); }

    public void onTabLoad(TabContainer container, boolean select) {
    }

    @Override
    protected Widget buildUI() {
        return null;
    }

    @Override
    protected void bindUI() {

    }

    @Override
    protected void configureTabView() {

    }

    @Override
    public void onTabLoad(boolean select, String eventName) {
        genericQueryTab = this;

        registerTab(select, eventName);

        tlsOptionEnabled = false;

        genericQueryTab.reloadTransactionOfferings();

        // customization of GenericQueryTab
        autoAddRunnerButtons = false;  // want them in a different place
        genericQueryTitle = "Select System Under Test";
        genericQueryInstructions = new HTML(
                "<p>XXX When the test is run a Stored Query or Retrieve transaction will be sent to the " +
                        "Initiating Gateway " +
                        "selected below. This will start the test. Before running a test, make sure your " +
                        "Initiating Gateway is configured to send to the Responding Gateways above.  This " +
                        "tool uses only non-TLS endpoints. TLS selection is disabled.</p>" +

                        "<br />It may ne necessary to refresh the selection list at times.  The Reload button" +
                        " at the top of the screen performs this refresh."

        );
        addResultsPanel = false;  // manually done below




        ////////////////////////////////////////////////////////////////////////////////////////////////
        tabTopPanel.add(new HTML("<h1>Initiating Gateway X Test Tool</h1>"));

        Image initiatingGatewayDiagram=new Image();
        initiatingGatewayDiagram.setUrl("diagrams/IGdiagram.png");
        initiatingGatewayDiagram.setHeight("300px");
        tabTopPanel.add(initiatingGatewayDiagram);

        tabTopPanel.add(new HTML("<p>" +
                "This tool tests an Initiating Gateway XX with Affinity Domain option.  The tests are driven by " +
                "a Document Consumer as defined by the Affinity Domain option. The Initiating Gateway XX" +
                "(System Under Test) will " +
                "be configured to relay requests to two Responding Gateways. This tool supplies the " +
                "Document Consumer and Responding Gateways as Toolkit supported simulators. " +
                "Each of the Responding Gateways is backed by a Registry and a Repository which will be loaded " +
                "with supporting test data. The test data patterns needed for testing are assigned to different " +
                "Patient IDs so that once the Initiating Gateway SUT is configured, different test environments " +
                "can be simulated by targeting different Patient IDs." +
                "</p>" +

                "<h2>Create supporting test session</h2>" +
                "These simulators and " +
                "their logs will be maintained in a test session you create for this test. At the top of the window, " +
                "create a new test session and select it. " +
                "</p>"
        ));

        ////////////////////////////////////////////////////////////////////////////////////////////////
        tabTopPanel.add(new HTML(
                "<hr />" +
                        "<h2>Build Test Environment</h2>" +
                        "<p>" +
                        "The Build Test Environment button will create the necessary simulators to test your Initiating Gateway XX:  " +
                        "a Document Consumer to drive the test and two Responding Gateways to service requests from " +
                        "your Initiating Gateway. " +

                        "The generated test configuration will be displayed below. " +
                        "Once the test environment is built, configure your Initiating Gateway to forward requests " +
                        "to the two generated Responding Gateways. </p>"

        ));

        HorizontalPanel testEnvironmentsPanel = new HorizontalPanel();
        tabTopPanel.add(testEnvironmentsPanel);

//        new BuildIGTestOrchestrationButton(this, testEnvironmentsPanel, "Build Test Environment", false);

//        new BuildIGTestOrchestrationButton(this, testEnvironmentsPanel, "Build Demonstration Environment", true);

        ////////////////////////////////////////////////////////////////////////////////////////////////
        // Query boilerplate
        ActorType act = ActorType.findActor(selectedActor);

        List<TransactionType> tt = act.getTransactions();

        // has to be before addQueryBoilerplate() which
        // references mainGrid
        mainGrid = new FlexTable();

        queryBoilerplate = addQueryBoilerplate(
                new Runner(),
                tt,
                new CoupledTransactions(),
                false  /* display patient id param */);

        tabTopPanel.add(testSelectionManager.buildTestSelector());

        tabTopPanel.add(testSelectionManager.buildSectionSelector());

        tabTopPanel.add(mainGrid);

        testSelectionManager.loadTestsFromCollection(COLLECTION_NAME);


        ////////////////////////////////////////////////////////////////////////////////////////////////
        tabTopPanel.add(new HTML(
                "<hr />" +
                        "<h2>Run Test</h2>" +
                        "<p>" +
                        "Initiate the test from the Toolkit Document Consumer. After the test is run " +
                        "the Document Consumer's logs can be displayed with Inspect Results." +
                        "</p>"
        ));

        addRunnerButtons(tabTopPanel);

        tabTopPanel.add(resultPanel);
    }

    class Runner implements ClickHandler {

        public void onClick(ClickEvent event) {
            resultPanel.clear();

            if (getCurrentTestSession().isEmpty()) {
                new PopupMessage("Test Session must be selected");
                return;
            }

            if (!verifySiteProvided()) return;

            addStatusBox();
            getGoButton().setEnabled(false);
            getInspectButton().setEnabled(false);

            Map<String, String> parms = new HashMap<>();
            parms.put("$testdata_home$", rgConfigs.get(0).get(SimulatorProperties.homeCommunityId).asString());

            Panel logLaunchButtonPanel = rigForRunning();
            logLaunchButtonPanel.clear();
            logLaunchButtonPanel.add(testSelectionManager.buildLogLauncher(rgConfigs));
            String testToRun = selectedTest;
            if (TestSelectionManager.ALL.equals(testToRun)) {
                testToRun = "tc:" + COLLECTION_NAME;
            }

            TestInstance testInstance = new TestInstance(testToRun);
            testInstance.setTestSession(new TestSession(getCurrentTestSession()));
            new RunMesaTestCommand(){
                @Override
                public void onComplete(List<Result> result) {
                    queryCallback.onSuccess(result);
                }
            }.run(new RunTestRequest(getCommandContext(),getSiteSelection(),new TestInstance(testToRun),parms,true,testSelectionManager.getSelectedSections()));
        }

    }

    Button addTestEnvironmentInspectorButton(final String siteName) {
        return addTestEnvironmentInspectorButton(siteName, "Inspect Test Data - " + siteName);
    }

    Button addTestEnvironmentInspectorButton(final String siteName, String label) {
        Button button = new Button(label);
        button.addClickHandler(new ClickHandler() {
            @Override
            public void onClick(ClickEvent clickEvent) {
                List<TestInstance> tests = new ArrayList<TestInstance>();
                tests.add(new TestInstance("15807"));
                new GetTestResultsCommand(){
                    @Override
                    public void onComplete(Map<String, Result> stringResultMap) {
                        Result result = stringResultMap.get("15807");
                        if (result == null) {
                            new PopupMessage("Results not available");
                            return;
                        }
                        SiteSpec siteSpec = new SiteSpec(siteName, ActorType.RESPONDING_GATEWAY, null, new TestSession(getCurrentTestSession()));

                        MetadataInspectorTab itab = new MetadataInspectorTab();
                        List<Result> results = new ArrayList<Result>();
                        results.add(result);
                        itab.setResults(results);
                        itab.setSiteSpec(siteSpec);
//                        itab.setToolkitService(toolkitService);
                        itab.onTabLoad(true, "Insp");
                    }
                }.run(new GetTestResultsRequest(getCommandContext(),tests));
            }
        });
        return button;
    }

    public String getWindowShortName() {
        return "igxtests";
    }

}
